// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // Cibles binaires explicites pour Debian/Slim (qui utilise OpenSSL 1.1.x)
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

// --- ÉNUMÉRATIONS ---

enum UserRole {
  USER
  OPERATOR
  ADMIN
}

enum TransportType {
  LOUAGE
  BUS
  TRANSPORTER
}

// --- MODÈLES DE DONNÉES ---

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  password    String
  displayName String
  role        UserRole
  trips       Trip[]
}

model Station {
  id                String       @id @default(cuid())
  name              String
  city              String
  lat               Float
  lng               Float
  louageTrips       LouageTrip[] @relation("LouageStation")
  busDepartureTrips BusTrip[]    @relation("DepartureStation")
  busArrivalTrips   BusTrip[]    @relation("ArrivalStation")
}

model Trip {
  id              String           @id @default(cuid())
  type            TransportType
  operator        User             @relation(fields: [operatorId], references: [id])
  operatorId      String
  operatorName    String
  fromCity        String
  toCity          String
  departureTime   DateTime
  arrivalTime     DateTime
  louageTrip      LouageTrip?
  busTrip         BusTrip?
  transporterTrip TransporterTrip?
}

model LouageTrip {
  id                String   @id @default(cuid())
  trip              Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId            String   @unique
  station           Station? @relation("LouageStation", fields: [stationId], references: [id])
  stationId         String?
  customStationName String?
  price             Float
  totalSeats        Int
  availableSeats    Int
  isFull            Boolean
  vehicleNumber     String?
  contactInfo       String?
}

model BusTrip {
  id                         String   @id @default(cuid())
  trip                       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId                     String   @unique
  departureStation           Station? @relation("DepartureStation", fields: [departureStationId], references: [id])
  departureStationId         String?
  arrivalStation             Station? @relation("ArrivalStation", fields: [arrivalStationId], references: [id])
  arrivalStationId           String?
  customDepartureStationName String?
  customArrivalStationName   String?
  price                      Float
  totalSeats                 Int
  availableSeats             Int
}

model TransporterTrip {
  id             String   @id @default(cuid())
  trip           Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId         String   @unique
  contactInfo    String
  vehicleType    String
  availableSpace String
  eta            String
  route          String[]
}